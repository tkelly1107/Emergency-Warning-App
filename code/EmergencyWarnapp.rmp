<?xml version="1.0" encoding="UTF-8"?><process version="9.10.008">
  <context>
    <input/>
    <output/>
    <macros/>
  </context>
  <operator activated="true" class="process" compatibility="9.10.008" expanded="true" name="Process">
    <parameter key="logverbosity" value="init"/>
    <parameter key="random_seed" value="2001"/>
    <parameter key="send_mail" value="never"/>
    <parameter key="notification_email" value=""/>
    <parameter key="process_duration_for_mail" value="30"/>
    <parameter key="encoding" value="UTF-8"/>
    <process expanded="true">
      <operator activated="false" breakpoints="after" class="r_scripting:execute_r" compatibility="9.6.000" expanded="true" height="82" name="Remove Review Collection from DB" width="90" x="45" y="34">
        <parameter key="script" value="library(mongolite)&#10;connection_string = 'mongodb+srv://admin:MeltemINFP2020@googlecluster.z2zrj.mongodb.net/app_proj_db'&#10;review_collection = mongo(collection=&quot;review_collection&quot;, db=&quot;app_proj_db&quot;, url=connection_string)&#10;review_collection$iterate()$one()&#10;review_collection$remove('{}')&#10;info_collection = mongo(collection=&quot;info_collection&quot;, db=&quot;app_proj_db&quot;, url=connection_string)&#10;info_collection$iterate()$one()&#10;info_collection$remove('{}')&#10;"/>
        <parameter key="use_default_R" value="true"/>
        <parameter key="Rscript_executable" value="C:/R/Rscript.exe"/>
        <parameter key="use_default_R_LIBS_paths" value="true"/>
        <enumeration key="R_LIBS_paths"/>
      </operator>
      <operator activated="false" breakpoints="after" class="python_scripting:execute_python" compatibility="9.10.002" expanded="true" height="82" name="Extract Google Reviews" width="90" x="179" y="34">
        <parameter key="script" value="import pandas as pd&#10;from google_play_scraper import app, Sort, reviews&#10;from pprint import pprint&#10;import pymongo&#10;from pymongo import MongoClient&#10;import datetime as dt&#10;from tzlocal import get_localzone&#10;import random&#10;import time&#10;import openpyxl&#10;&#10;#Connect to MongoDB google cluster.&#10;client = MongoClient(&quot;mongodb+srv://admin:MeltemINFP2020@googlecluster.z2zrj.mongodb.net&quot;)&#10;app_proj_db = client['app_proj_db']&#10;info_collection = app_proj_db['info_collection']&#10;review_collection = app_proj_db['review_collection']&#10;#Before reading in csv, make sure to separate app id from google url with r script in folder&#10;app_df = pd.read_excel(r'C:\Users\recon\OneDrive - Nova Southeastern University\Emergency Communication data\Emergency Com Data.xlsx')&#10;app_df.head()&#10;&#10;app_names = list(app_df['App_Name'])&#10;app_ids = list(app_df['AppID'])&#10;#error occurrs here. investigate.&#10;app_info = []&#10;for i in app_ids:&#10;    info = app(i)&#10;    del info['comments']&#10;    app_info.append(info)&#10;&#10;pprint(app_info[0])&#10;&#10;info_collection.insert_many(app_info)&#10;info_df = pd.DataFrame(list(info_collection.find({})))&#10;info_df.head()&#10;&#10;&#10;for app_name, app_id in zip(app_names, app_ids):&#10;    &#10;    &#10;    start = dt.datetime.now(tz=get_localzone())&#10;    fmt= &quot;%m/%d/%y - %T %p&quot;    &#10;    &#10;    &#10;    print('---'*20)&#10;    print('---'*20)    &#10;    print(f'***** {app_name} started at {start.strftime(fmt)}')&#10;    print()&#10;    &#10;    &#10;    app_reviews = []&#10;    &#10;    &#10;    count = 200&#10;    &#10;    &#10;    batch_num = 0&#10;    &#10;    &#10;    &#10;    rvws, token = reviews(&#10;        app_id,           &#10;        lang='en',        &#10;        country='us',     &#10;        sort=Sort.NEWEST, &#10;        count=count       &#10;    )&#10;    &#10;    &#10;    &#10;    for r in rvws:&#10;        r['app_name'] = app_name &#10;        r['app_id'] = app_id     &#10;     &#10;    &#10;    &#10;    app_reviews.extend(rvws)&#10;    &#10;    &#10;    batch_num +=1 &#10;    print(f'Batch {batch_num} completed.')&#10;    &#10;    &#10;    time.sleep(random.randint(1,5))&#10;    &#10;    &#10;    &#10;    &#10;    pre_review_ids = []&#10;    for rvw in app_reviews:&#10;        pre_review_ids.append(rvw['reviewId'])&#10;    &#10;    &#10;    &#10;    for batch in range(4999):&#10;        rvws, token = reviews( # store continuation_token&#10;            app_id,&#10;            lang='en',&#10;            country='us',&#10;            sort=Sort.NEWEST,&#10;            count=count,&#10;            # using token obtained from previous batch&#10;            continuation_token=token&#10;        )&#10;        &#10;        &#10;        new_review_ids = []&#10;        for r in rvws:&#10;            new_review_ids.append(r['reviewId'])&#10;            &#10;            # And add keys for name and id to ea review dict&#10;            r['app_name'] = app_name # add key for app's name&#10;            r['app_id'] = app_id     # add key for app's id&#10;     &#10;        &#10;        app_reviews.extend(rvws)&#10;        &#10;        &#10;        batch_num +=1&#10;        &#10;        &#10;          &#10;        all_review_ids = pre_review_ids + new_review_ids&#10;        if len(set(pre_review_ids)) == len(set(all_review_ids)):&#10;            print(f'No reviews left to scrape. Completed {batch_num} batches.\n')&#10;            break&#10;        &#10;         &#10;          &#10;        pre_review_ids = all_review_ids&#10;        &#10;        &#10;        &#10;        if batch_num%100==0:&#10;            &#10;            &#10;            print(f'Batch {batch_num} completed.')&#10;            &#10;            &#10;            review_collection.insert_many(app_reviews)&#10;            &#10;            &#10;            store_time = dt.datetime.now(tz=get_localzone())&#10;            print(f&quot;&quot;&quot;&#10;            Successfully inserted {len(app_reviews)} {app_name} &#10;            reviews into collection at {store_time.strftime(fmt)}.\n&#10;            &quot;&quot;&quot;)&#10;            &#10;            &#10;            app_reviews = []&#10;        &#10;        &#10;        time.sleep(random.randint(1,5))&#10;      &#10;    &#10;    &#10;      &#10;    print(f'Done scraping {app_name}.')&#10;    print(f'Scraped a total of {len(set(pre_review_ids))} unique reviews.\n')&#10;    &#10;    &#10;    &#10;    review_collection.insert_many(app_reviews)&#10;    &#10;    &#10;    end = dt.datetime.now(tz=get_localzone())&#10;    &#10;    &#10;    print(f&quot;&quot;&quot;&#10;    Successfully inserted all {app_name} reviews into collection&#10;    at {end.strftime(fmt)}.\n&#10;    &quot;&quot;&quot;)&#10;    print(f'Time elapsed for {app_name}: {end-start}')&#10;    print('---'*20)&#10;    print('---'*20)&#10;    print('\n')&#10;    &#10;    &#10;    time.sleep(random.randint(1,5))&#10;"/>
        <parameter key="notebook_cell_tag_filter" value=""/>
        <parameter key="use_default_python" value="true"/>
        <parameter key="package_manager" value="conda (anaconda)"/>
        <parameter key="use_macros" value="false"/>
      </operator>
      <operator activated="false" class="r_scripting:execute_r" compatibility="9.6.000" expanded="true" height="82" name="Clean Data in MongoDB then Re-insert" width="90" x="313" y="34">
        <parameter key="script" value="---&#10;title: &quot;Clean Mongo Atlas data&quot;&#10;output: html_notebook&#10;#This code connects to MongoDB Atlas, cleans the data then re-inserts it back into MongoDB&#10;#Then it prints a csv file to shared folder of check text error log&#10;---&#10;library(mongolite)&#10;connection_string = 'mongodb+srv://admin:MeltemINFP2020@googlecluster.z2zrj.mongodb.net/app_proj_db'&#10;review_collection = mongo(collection=&quot;review_collection&quot;, db=&quot;app_proj_db&quot;, url=connection_string)&#10;review_collection$iterate()$one()&#10;alldata &lt;- review_collection$find('{}')&#10;&#10;library(dplyr)&#10;library(textshape)&#10;library(lexicon)&#10;library(textclean)&#10;library(readr)&#10;library(tidyverse)&#10;&#10;filter_empty_row(alldata)&#10;filter_NA(alldata)&#10;unique(alldata)&#10;alldata %&gt;% distinct(reviewId, .keep_all = TRUE)&#10;&#10;review_collection$remove('{}')&#10;review_collection$insert(alldata)&#10;&#10;library(textclean)&#10;checktext_results &lt;- check_text(alldata$content)&#10;write.csv(checktext_results,&quot;C:\\Users\\recon\\OneDrive - Nova Southeastern University\\Emergency Communication data\\Data\\temp files\\checktext_results.csv&quot;, row.names = TRUE)&#10;"/>
        <parameter key="use_default_R" value="true"/>
        <parameter key="Rscript_executable" value="C:/R/Rscript.exe"/>
        <parameter key="use_default_R_LIBS_paths" value="true"/>
        <enumeration key="R_LIBS_paths"/>
      </operator>
      <operator activated="true" class="retrieve" compatibility="9.10.008" expanded="true" height="68" name="Connect to MongoDB" width="90" x="45" y="136">
        <parameter key="repository_entry" value="//Local Repository/Connections/gg"/>
      </operator>
      <operator activated="true" class="nosql:mongodb_document_reader" compatibility="9.8.000" expanded="true" height="124" name="Read MongoDB (2)" width="90" x="179" y="136">
        <parameter key="connection_source" value="repository"/>
        <parameter key="connection_entry" value="//Local Repository/Connections/Google Cluster"/>
        <parameter key="collection" value="info_collection"/>
        <parameter key="sort_documents" value="false"/>
        <parameter key="limit_results" value="false"/>
        <parameter key="skip" value="0"/>
      </operator>
      <operator activated="true" class="text:json_to_data" compatibility="9.4.000" expanded="true" height="82" name="JSON To Data" width="90" x="313" y="136">
        <parameter key="ignore_arrays" value="false"/>
        <parameter key="limit_attributes" value="false"/>
        <parameter key="skip_invalid_documents" value="false"/>
        <parameter key="guess_data_types" value="true"/>
        <parameter key="keep_missing_attributes" value="false"/>
        <parameter key="missing_values_aliases" value=", null, NaN, missing"/>
      </operator>
      <operator activated="true" class="retrieve" compatibility="9.10.008" expanded="true" height="68" name="Connect to MongoDB (2)" width="90" x="45" y="289">
        <parameter key="repository_entry" value="//Local Repository/Connections/gg"/>
      </operator>
      <operator activated="true" class="nosql:mongodb_document_reader" compatibility="9.8.000" expanded="true" height="124" name="Read MongoDB" width="90" x="179" y="289">
        <parameter key="connection_source" value="repository"/>
        <parameter key="connection_entry" value="//Local Repository/Connections/Google Cluster"/>
        <parameter key="collection" value="review_collection"/>
        <parameter key="sort_documents" value="false"/>
        <parameter key="limit_results" value="false"/>
        <parameter key="skip" value="0"/>
      </operator>
      <operator activated="true" class="text:json_to_data" compatibility="9.4.000" expanded="true" height="82" name="JSON To Data (2)" width="90" x="313" y="289">
        <parameter key="ignore_arrays" value="false"/>
        <parameter key="limit_attributes" value="false"/>
        <parameter key="skip_invalid_documents" value="false"/>
        <parameter key="guess_data_types" value="true"/>
        <parameter key="keep_missing_attributes" value="false"/>
        <parameter key="missing_values_aliases" value=", null, NaN, missing"/>
      </operator>
      <connect from_op="Connect to MongoDB" from_port="output" to_op="Read MongoDB (2)" to_port="connection"/>
      <connect from_op="Read MongoDB (2)" from_port="collection" to_op="JSON To Data" to_port="documents 1"/>
      <connect from_op="JSON To Data" from_port="example set" to_port="result 1"/>
      <connect from_op="Connect to MongoDB (2)" from_port="output" to_op="Read MongoDB" to_port="connection"/>
      <connect from_op="Read MongoDB" from_port="collection" to_op="JSON To Data (2)" to_port="documents 1"/>
      <connect from_op="JSON To Data (2)" from_port="example set" to_port="result 2"/>
      <portSpacing port="source_input 1" spacing="0"/>
      <portSpacing port="sink_result 1" spacing="0"/>
      <portSpacing port="sink_result 2" spacing="0"/>
      <portSpacing port="sink_result 3" spacing="0"/>
      <description align="center" color="yellow" colored="false" height="67" resized="true" width="174" x="426" y="156">View review metadata from MongoDB</description>
      <description align="center" color="yellow" colored="false" height="72" resized="true" width="189" x="425" y="299">View review data from MongoDB</description>
    </process>
  </operator>
</process>
